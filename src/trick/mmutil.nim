##[
.. include:: doc/styles.rst
`â†© back to overview<../trick.html>`_
]##

import os, osproc, times, strutils, strformat, strscans
import common

var mmutilPath*: string
  ## Path to `mmutil` executable.
  ## 
  ## You may wish to override this if you're not using devkitARM
  ## and `mmutil` is not in your system's PATH.

# Find mmutil in system path
mmutilPath = findExe("mmutil")

# If none was found, try devkitPro tools directory as a fallback?
if mmutilPath == "" and existsEnv("DEVKITPRO"):
  mmutilPath = getEnv("DEVKITPRO")/"tools"/"mmutil".addFileExt(ExeExt)


proc mmutil(args: string) =
  ## Invoke mmutil with the given arguments.
  doAssert(
    existsFile(mmutilPath),
    "Could not find mmutil executable! (mmutilPath = \"" & mmutilPath & "\")\n" &
    "Check you have a working devkitARM installation (including the gba-dev or nds-dev package group), " &
    "or try adding a mmutil to your PATH environment variable."
  )
  let res = execCmd(mmutilPath & " " & args)
  if res != 0:
    raiseAssert("mmutil failed with code " & $res)


proc makeSoundbank*(nimOutputPath, cOutputPath: string, inputFiles: string | openarray[string], nds = false) =
  ## Invoke the Maxmod utility program (mmutil), to convert music and sound effects into a soundbank.
  ## The output produced by mmutil is then converted into C and Nim code which can be used in your game.
  ## 
  ## **Parameters:**
  ## 
  ## nimOutputPath
  ##   Target Nim file to be imported and used in your game code.
  ## 
  ## cOutputPath
  ##   Target C file to contain read-only data, which will be linked into the final ROM.
  ## 
  ## inputFiles
  ##   | Can be either a wildcard pattern, or an sequence/array of file names.
  ##   | Valid file formats are: `.mod`, `.s3m`, `.xm`, `.it`, `.wav`
  ## 
  ## nds
  ##   This flag can be used if you want to produce a soundbank for Nintendo DS instead of GBA.
  ## 
  ## **Example:**
  ## 
  ## Conversion code:
  ## 
  ## .. code-block:: nim
  ##   import trick/mmutil
  ##   
  ##   # create a soundbank from all files in the "audio" directory
  ##   makeSoundbank("source/soundbank.nim", "data/soundbank.c", "audio/*")
  ## 
  ## GBA game code:
  ## 
  ## .. code-block:: nim
  ##   import natu/maxmod
  ##   import soundbank
  ##   
  ##   irqInit()
  ##   irqEnable(II_VBLANK)
  ##   irqAdd(II_VBLANK, maxmod.vblank)      # register vblank handler
  ##   maxmod.init(soundbankBin, 16)         # init with 16 channels, using our soundbank data
  ##   maxmod.start(modOcean, MM_PLAY_LOOP)  # play a song from the soundbank
  ##   
  ##   # main loop
  ##   while true:
  ##     maxmod.frame()
  ##     VBlankIntrWait()
  ## 
  
  let soundbankTemp = getTempDir() / "soundbank" & $(getTime().toUnix())
  let soundbankHeader = soundbankTemp & ".h"
  let soundbankBin = soundbankTemp & ".bin"
  let cRelativePath = relativePath(cOutputPath, nimOutputPath.parentDir(), '/')
  let dateAndTime = now().format("yyyy-MM-dd 'at' HH:mm")
  
  var args = fmt" -o{soundbankBin} -h{soundbankHeader} "
  
  # flag for Nintendo DS soundbank
  if nds:
    args.add("-d ")
  
  # add files
  when inputFiles is string:
    for f in walkFiles(inputFiles):
      args.add(f & ' ')
  else:
    args.add(inputFiles.join(' '))
  
  # create soundbank.bin and soundbank.h
  mmutil(args)
  
  # convert soundbank.bin to C code
  var cSrc = fmt """
// Generated by trick/mmutil on {dateAndTime}
const char* const soundbank_bin = {makeCString(readFile(soundbankBin))};
"""
  
  # convert soundbank.h to nim code
  var nimSrc = fmt """
# Generated by trick/mmutil on {dateAndTime}

{{.compile:"{cRelativePath}".}}
var soundbankBin* {{.importc:"soundbank_bin", extern:"soundbank_bin", codegenDecl:"extern const $# $#".}}: cstring
"""
  for line in lines(soundbankHeader):
    var name: string
    var val: int
    if scanf(line, "#define $w$s$i", name, val):
      name = name.toLowerAscii().toCamelCase()
      nimSrc.add("const {name}* = {val}\n".fmt)
  
  removeFile(soundbankHeader)
  removeFile(soundbankBin)
  
  # write soundbank.nim + .c
  writeFile(nimOutputPath, nimSrc)
  writeFile(cOutputPath, cSrc)